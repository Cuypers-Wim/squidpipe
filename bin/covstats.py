#!/usr/bin/env python3

"""
This script processes a large tab-separated file generated by `samtools depth`, which contains read depth information across multiple chromosomes.
The script calculates coverage metrics for each chromosome and outputs the results in a CSV file.

Usage:
    python3 script_name.py <input_file> <output_file>

    <input_file>: Path to the input file containing the depth information for multiple chromosomes.
    <output_file>: Path to the output CSV file where the results will be saved.

Output:
    The script outputs a CSV file with the following columns for each chromosome:
        - Chromosome: Name of the chromosome.
        - Coverage (%): Percentage of positions covered by at least one read.
        - Depth of Coverage: Average read depth across all positions in the chromosome.
        - Positions ≥10 Reads (%): Percentage of positions covered by at least 10 reads.
        - Positions ≥20 Reads (%): Percentage of positions covered by at least 20 reads.
        - Positions ≥30 Reads (%): Percentage of positions covered by at least 30 reads.

Example:
    python3 calculate_coverage_by_chromosome.py depth_data.txt coverage_metrics.csv

Requirements:
    - pandas
"""

import pandas as pd

def process_chromosome_group(chromosome, group_df):
    """
    Calculates coverage metrics for a specific chromosome group.

    Args:
        chromosome (str): The name of the chromosome.
        group_df (DataFrame): A Pandas DataFrame containing depth information for the chromosome.

    Returns:
        dict: A dictionary with the chromosome name and calculated metrics.
    """
    
    genome_length = group_df.shape[0]
    coverage_percentage = (len(group_df[group_df['depth'] > 0]) / genome_length) * 100
    depth_of_coverage = group_df['depth'].mean()
    positions_covered_at_least_10_percentage = (len(group_df[group_df['depth'] >= 10]) / genome_length) * 100
    positions_covered_at_least_20_percentage = (len(group_df[group_df['depth'] >= 20]) / genome_length) * 100
    positions_covered_at_least_30_percentage = (len(group_df[group_df['depth'] >= 30]) / genome_length) * 100
    
    return {
        'Chromosome': chromosome,
        'Coverage (%)': coverage_percentage,
        'Depth of Coverage': depth_of_coverage,
        'Positions ≥10 Reads (%)': positions_covered_at_least_10_percentage,
        'Positions ≥20 Reads (%)': positions_covered_at_least_20_percentage,
        'Positions ≥30 Reads (%)': positions_covered_at_least_30_percentage
    }

def main(input_file, output_file):
    """
    Reads the input file, processes the data by chromosome, and writes the results to a CSV file.

    Args:
        input_file (str): Path to the input file containing depth information.
        output_file (str): Path to the output CSV file where the results will be saved.
    """
    depth_df = pd.read_csv(input_file, sep='\t', header=None, names=['chromosome', 'position', 'depth'])
    results = []
    
    for chromosome, group_df in depth_df.groupby('chromosome'):
        result = process_chromosome_group(chromosome, group_df)
        results.append(result)
    
    results_df = pd.DataFrame(results)
    results_df.to_csv(output_file, index=False)
    print(f"Results saved to {output_file}")

if __name__ == "__main__":
    import sys
    main(sys.argv[1], sys.argv[2])
